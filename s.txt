 主要目录结构
```
trpc-cpp/
├── BUILD                    # Bazel构建文件
├── WORKSPACE               # Bazel工作空间配置
├── build.sh                # 构建脚本
├── docs/                   # 文档目录
│   ├── en/                 # 英文文档
│   └── zh/                 # 中文文档
├── examples/               # 示例代码
│   ├── helloworld/         # Hello World示例
│   ├── http/               # HTTP示例
│   └── streaming/          # 流式示例
├── trpc/                   # 核心框架代码
│   ├── client/             # 客户端相关
│   │   ├── client.h
│   │   ├── service_proxy.h # 服务代理基类
│   │   └── http/           # HTTP客户端
│   ├── server/             # 服务端相关
│   │   ├── server.h
│   │   ├── service.h       # 服务基类
│   │   └── http/           # HTTP服务端
│   ├── codec/              # 编解码器
│   │   ├── codec.h         # 编解码器基类
│   │   ├── trpc/           # tRPC协议编解码
│   │   └── http/           # HTTP协议编解码
│   ├── transport/          # 传输层
│   │   ├── client/         # 客户端传输
│   │   └── server/         # 服务端传输
│   ├── stream/             # 流式处理
│   │   ├── stream.h        # 流式接口
│   │   └── http/           # HTTP流式处理
│   ├── runtime/            # 运行时
│   │   ├── fiber/          # 协程运行时
│   │   └── threadmodel/    # 线程模型
│   ├── filter/             # 过滤器（拦截器）
│   ├── naming/             # 服务发现
│   ├── serialization/      # 序列化
│   ├── compressor/         # 压缩
│   ├── log/                # 日志
│   ├── metrics/            # 监控指标
│   ├── config/             # 配置管理
│   ├── admin/              # 管理接口
│   └── util/               # 工具类
├── test/                   # 测试代码
└── third_party/            # 第三方依赖
```
## 文档目录 (docs/)

```
docs/
├── en/                     # 英文文档
│   ├── README.md
│   ├── architecture_design.md      # 架构设计文档
│   ├── quick_start.md              # 快速开始指南
│   ├── proto_management.md         # Proto文件管理
│   ├── configuration.md            # 配置说明
│   ├── serialization.md            # 序列化说明
│   ├── compression.md              # 压缩功能说明
│   ├── prometheus_metrics.md       # Prometheus监控
│   ├── admin_service.md            # 管理服务说明
│   ├── tvar.md                     # 变量统计系统
│   ├── rpcz.md                     # RPC调试工具
│   ├── overload_control.md         # 过载控制
│   ├── request_dispatch.md         # 请求分发
│   └── ...
└── zh/                     # 中文文档
    ├── README.md
    ├── architecture_design.md
    ├── quick_start.md
    ├── proto_management.md
    ├── configuration.md
    ├── serialization.md
    ├── compression.md
    ├── prometheus_metrics.md
    ├── admin_service.md
    ├── tvar.md
    ├── rpcz.md
    ├── overload_control.md
    ├── request_dispatch.md
    └── ...
```

## 示例代码目录 (examples/)

```
examples/
├── BUILD                   # 示例构建文件
├── helloworld/             # 基础Hello World示例
│   ├── BUILD
│   ├── server/
│   │   ├── server.cc       # 服务端实现
│   │   └── BUILD
│   ├── client/
│   │   ├── client.cc       # 客户端实现
│   │   └── BUILD
│   ├── proxy/
│   │   ├── proxy.cc        # 代理服务实现
│   │   └── BUILD
│   └── run.sh              # 运行脚本
├── http/                   # HTTP服务示例
│   ├── BUILD
│   ├── server/
│   │   ├── http_server.cc  # HTTP服务端
│   │   └── BUILD
│   ├── client/
│   │   ├── http_client.cc  # HTTP客户端
│   │   └── BUILD
│   └── run.sh
├── streaming/              # 流式RPC示例
│   ├── BUILD
│   ├── server/
│   │   ├── stream_server.cc # 流式服务端
│   │   └── BUILD
│   ├── client/
│   │   ├── stream_client.cc # 流式客户端
│   │   └── BUILD
│   └── run.sh
├── features/               # 特性示例
│   ├── admin/              # 管理接口示例
│   ├── fiber/              # 协程示例
│   ├── future/             # Future异步示例
│   ├── prometheus/         # Prometheus监控示例
│   ├── tracing/            # 分布式追踪示例
│   └── ...
└── tools/                  # 工具示例
    ├── proto_management/   # Proto管理工具示例
    └── ...
```

## 核心框架代码 (trpc/)

### 客户端模块 (trpc/client/)

```
trpc/client/
├── BUILD                   # 客户端构建文件
├── client.h                # 客户端主类
├── client.cc               # 客户端实现
├── client_context.h        # 客户端上下文
├── client_context.cc       # 客户端上下文实现
├── service_proxy.h         # 服务代理基类（核心）
├── service_proxy.cc        # 服务代理实现
├── service_proxy_option.h  # 服务代理选项配置
├── service_proxy_option.cc # 服务代理选项实现
├── rpc_service_proxy.h     # RPC服务代理
├── rpc_service_proxy.cc    # RPC服务代理实现
├── http/                   # HTTP客户端
│   ├── BUILD
│   ├── http_service_proxy.h     # HTTP服务代理
│   ├── http_service_proxy.cc    # HTTP服务代理实现
│   ├── http_service_proxy_option.h  # HTTP代理选项
│   └── http_service_proxy_option.cc # HTTP代理选项实现
├── redis/                  # Redis客户端
│   ├── BUILD
│   ├── redis_service_proxy.h
│   └── redis_service_proxy.cc
└── grpc/                   # gRPC客户端
    ├── BUILD
    ├── grpc_service_proxy.h
    └── grpc_service_proxy.cc
```

### 服务端模块 (trpc/server/)

```
trpc/server/
├── BUILD                   # 服务端构建文件
├── server.h                # 服务端主类
├── server.cc               # 服务端实现
├── server_context.h        # 服务端上下文
├── server_context.cc       # 服务端上下文实现
├── service.h               # 服务基类（核心）
├── service.cc              # 服务实现
├── service_adapter.h       # 服务适配器
├── service_adapter.cc      # 服务适配器实现
├── service_adapter_option.h # 服务适配器选项
├── service_adapter_option.cc # 服务适配器选项实现
├── rpc/                    # RPC服务
│   ├── BUILD
│   ├── rpc_service.h       # RPC服务基类
│   ├── rpc_service.cc      # RPC服务实现
│   ├── rpc_method_handler.h # RPC方法处理器
│   └── rpc_method_handler.cc # RPC方法处理器实现
├── http/                   # HTTP服务
│   ├── BUILD
│   ├── http_service.h      # HTTP服务基类
│   ├── http_service.cc     # HTTP服务实现
│   ├── http_handler.h      # HTTP处理器
│   ├── http_handler.cc     # HTTP处理器实现
│   ├── http_async_handler.h # HTTP异步处理器
│   └── http_async_handler.cc # HTTP异步处理器实现
├── non_rpc/                # 非RPC服务
│   ├── BUILD
│   ├── non_rpc_service.h
│   └── non_rpc_service.cc
└── grpc/                   # gRPC服务
    ├── BUILD
    ├── grpc_service.h
    └── grpc_service.cc
```

### 编解码器模块 (trpc/codec/)

```
trpc/codec/
├── BUILD                   # 编解码器构建文件
├── codec.h                 # 编解码器基类（核心）
├── codec_factory.h         # 编解码器工厂
├── codec_factory.cc        # 编解码器工厂实现
├── codec_manager.h         # 编解码器管理器
├── codec_manager.cc        # 编解码器管理器实现
├── protocol.h              # 协议基类
├── protocol.cc             # 协议实现
├── trpc/                   # tRPC协议编解码
│   ├── BUILD
│   ├── trpc_protocol.h     # tRPC协议定义
│   ├── trpc_protocol.cc    # tRPC协议实现
│   ├── trpc_codec.h        # tRPC编解码器
│   ├── trpc_codec.cc       # tRPC编解码器实现
│   ├── trpc_client_codec.h # tRPC客户端编解码器
│   ├── trpc_client_codec.cc # tRPC客户端编解码器实现
│   ├── trpc_server_codec.h # tRPC服务端编解码器
│   └── trpc_server_codec.cc # tRPC服务端编解码器实现
├── http/                   # HTTP协议编解码
│   ├── BUILD
│   ├── http_protocol.h     # HTTP协议定义
│   ├── http_protocol.cc    # HTTP协议实现
│   ├── http_codec.h        # HTTP编解码器
│   ├── http_codec.cc       # HTTP编解码器实现
│   ├── request.h           # HTTP请求封装
│   ├── request.cc          # HTTP请求实现
│   ├── response.h          # HTTP响应封装
│   ├── response.cc         # HTTP响应实现
│   ├── http_parser.h       # HTTP解析器
│   ├── http_parser.cc      # HTTP解析器实现
│   ├── http2/              # HTTP/2支持
│   │   ├── BUILD
│   │   ├── http2_codec.h
│   │   └── http2_codec.cc
│   └── parameter.h         # HTTP参数解析
├── grpc/                   # gRPC协议编解码
│   ├── BUILD
│   ├── grpc_protocol.h
│   ├── grpc_protocol.cc
│   ├── grpc_codec.h
│   └── grpc_codec.cc
└── redis/                  # Redis协议编解码
    ├── BUILD
    ├── redis_protocol.h
    ├── redis_protocol.cc
    ├── redis_codec.h
    └── redis_codec.cc
```

### 传输层模块 (trpc/transport/)

```
trpc/transport/
├── BUILD                   # 传输层构建文件
├── transport.h             # 传输层基类
├── transport.cc            # 传输层实现
├── transport_factory.h     # 传输层工厂
├── transport_factory.cc    # 传输层工厂实现
├── transport_manager.h     # 传输层管理器
├── transport_manager.cc    # 传输层管理器实现
├── client/                 # 客户端传输
│   ├── BUILD
│   ├── client_transport.h  # 客户端传输基类
│   ├── client_transport.cc # 客户端传输实现
│   ├── client_transport_factory.h # 客户端传输工厂
│   ├── client_transport_factory.cc # 客户端传输工厂实现
│   ├── fiber/              # 协程模式客户端传输
│   │   ├── BUILD
│   │   ├── fiber_client_transport.h
│   │   ├── fiber_client_transport.cc
│   │   ├── conn_pool/      # 连接池
│   │   │   ├── BUILD
│   │   │   ├── fiber_conn_pool.h
│   │   │   ├── fiber_conn_pool.cc
│   │   │   ├── fiber_conn_pool_connection_handler.h
│   │   │   └── fiber_conn_pool_connection_handler.cc
│   │   └── conn_complex/   # 复杂连接管理
│   │       ├── BUILD
│   │       ├── fiber_conn_complex.h
│   │       └── fiber_conn_complex.cc
│   └── future/             # Future模式客户端传输
│       ├── BUILD
│       ├── future_client_transport.h
│       ├── future_client_transport.cc
│       ├── conn_pool/      # 连接池
│       │   ├── BUILD
│       │   ├── future_conn_pool.h
│       │   ├── future_conn_pool.cc
│       │   ├── future_conn_pool_connection_handler.h
│       │   └── future_conn_pool_connection_handler.cc
│       └── conn_complex/   # 复杂连接管理
│           ├── BUILD
│           ├── future_conn_complex.h
│           └── future_conn_complex.cc
└── server/                 # 服务端传输
    ├── BUILD
    ├── server_transport.h  # 服务端传输基类
    ├── server_transport.cc # 服务端传输实现
    ├── server_transport_factory.h # 服务端传输工厂
    ├── server_transport_factory.cc # 服务端传输工厂实现
    ├── fiber/              # 协程模式服务端传输
    │   ├── BUILD
    │   ├── fiber_server_transport.h
    │   └── fiber_server_transport.cc
    └── future/             # Future模式服务端传输
        ├── BUILD
        ├── future_server_transport.h
        └── future_server_transport.cc
```

### 流式处理模块 (trpc/stream/)

```
trpc/stream/
├── BUILD                   # 流式处理构建文件
├── stream.h                # 流式处理基类（核心）
├── stream.cc               # 流式处理实现
├── stream_reader.h         # 流式读取器接口
├── stream_reader.cc        # 流式读取器实现
├── stream_writer.h         # 流式写入器接口
├── stream_writer.cc        # 流式写入器实现
├── stream_handler.h        # 流式处理器
├── stream_handler.cc       # 流式处理器实现
├── stream_provider.h       # 流式提供器
├── stream_provider.cc      # 流式提供器实现
├── grpc/                   # gRPC流式处理
│   ├── BUILD
│   ├── grpc_stream.h       # gRPC流式处理
│   ├── grpc_stream.cc      # gRPC流式处理实现
│   ├── grpc_stream_reader.h # gRPC流式读取器
│   ├── grpc_stream_reader.cc # gRPC流式读取器实现
│   ├── grpc_stream_writer.h # gRPC流式写入器
│   └── grpc_stream_writer.cc # gRPC流式写入器实现
├── http/                   # HTTP流式处理
│   ├── BUILD
│   ├── http_stream.h       # HTTP流式处理
│   ├── http_stream.cc      # HTTP流式处理实现
│   ├── http_stream_reader.h # HTTP流式读取器
│   ├── http_stream_reader.cc # HTTP流式读取器实现
│   ├── http_stream_writer.h # HTTP流式写入器
│   └── http_stream_writer.cc # HTTP流式写入器实现
└── trpc/                   # tRPC流式处理
    ├── BUILD
    ├── trpc_stream.h       # tRPC流式处理
    ├── trpc_stream.cc      # tRPC流式处理实现
    ├── trpc_stream_reader.h # tRPC流式读取器
    ├── trpc_stream_reader.cc # tRPC流式读取器实现
    ├── trpc_stream_writer.h # tRPC流式写入器
    └── trpc_stream_writer.cc # tRPC流式写入器实现
```

### 运行时模块 (trpc/runtime/)

```
trpc/runtime/
├── BUILD                   # 运行时构建文件
├── runtime.h               # 运行时基类
├── runtime.cc              # 运行时实现
├── init_runtime.h          # 运行时初始化
├── init_runtime.cc         # 运行时初始化实现
├── merge_runtime.h         # 合并运行时
├── merge_runtime.cc        # 合并运行时实现
├── separate_runtime.h      # 分离运行时
├── separate_runtime.cc     # 分离运行时实现
├── fiber/                  # 协程运行时
│   ├── BUILD
│   ├── fiber.h             # 协程基类
│   ├── fiber.cc            # 协程实现
│   ├── fiber_runtime.h     # 协程运行时
│   ├── fiber_runtime.cc    # 协程运行时实现
│   ├── fiber_worker.h      # 协程工作器
│   ├── fiber_worker.cc     # 协程工作器实现
│   ├── fiber_entity.h      # 协程实体
│   ├── fiber_entity.cc     # 协程实体实现
│   ├── fiber_condition_variable.h # 协程条件变量
│   ├── fiber_condition_variable.cc # 协程条件变量实现
│   ├── fiber_mutex.h       # 协程互斥锁
│   ├── fiber_mutex.cc      # 协程互斥锁实现
│   ├── fiber_latch.h       # 协程闭锁
│   ├── fiber_latch.cc      # 协程闭锁实现
│   ├── fiber_local.h       # 协程本地存储
│   ├── fiber_local.cc      # 协程本地存储实现
│   ├── fiber_timer.h       # 协程定时器
│   ├── fiber_timer.cc      # 协程定时器实现
│   ├── async/              # 异步支持
│   │   ├── BUILD
│   │   ├── fiber_async.h
│   │   └── fiber_async.cc
│   └── detail/             # 内部实现细节
│       ├── BUILD
│       ├── fiber_desc.h
│       ├── fiber_desc.cc
│       ├── waitable.h
│       └── waitable.cc
├── threadmodel/            # 线程模型
│   ├── BUILD
│   ├── thread_model.h      # 线程模型基类
│   ├── thread_model.cc     # 线程模型实现
│   ├── thread_model_manager.h # 线程模型管理器
│   ├── thread_model_manager.cc # 线程模型管理器实现
│   ├── merge/              # 合并线程模型
│   │   ├── BUILD
│   │   ├── merge_thread_model.h
│   │   ├── merge_thread_model.cc
│   │   ├── merge_worker_thread.h
│   │   └── merge_worker_thread.cc
│   ├── separate/           # 分离线程模型
│   │   ├── BUILD
│   │   ├── separate_thread_model.h
│   │   ├── separate_thread_model.cc
│   │   ├── io_thread.h
│   │   ├── io_thread.cc
│   │   ├── handle_thread.h
│   │   └── handle_thread.cc
│   └── fiber/              # 协程线程模型
│       ├── BUILD
│       ├── fiber_thread_model.h
│       ├── fiber_thread_model.cc
│       ├── fiber_worker_thread.h
│       └── fiber_worker_thread.cc
└── iomodel/                # IO模型
    ├── BUILD
    ├── reactor/            # Reactor模型
    │   ├── BUILD
    │   ├── reactor.h       # Reactor基类
    │   ├── reactor.cc      # Reactor实现
    │   ├── default/        # 默认Reactor实现
    │   │   ├── BUILD
    │   │   ├── acceptor.h
    │   │   ├── acceptor.cc
    │   │   ├── connector.h
    │   │   ├── connector.cc
    │   │   ├── connection.h
    │   │   ├── connection.cc
    │   │   ├── tcp_acceptor.h
    │   │   ├── tcp_acceptor.cc
    │   │   ├── tcp_connector.h
    │   │   ├── tcp_connector.cc
    │   │   ├── tcp_connection.h
    │   │   ├── tcp_connection.cc
    │   │   ├── udp_transceiver.h
    │   │   ├── udp_transceiver.cc
    │   │   ├── ssl_acceptor.h
    │   │   ├── ssl_acceptor.cc
    │   │   ├── ssl_connector.h
    │   │   ├── ssl_connector.cc
    │   │   ├── ssl_connection.h
    │   │   └── ssl_connection.cc
    │   └── epoll/          # epoll实现
    │       ├── BUILD
    │       ├── epoll_reactor.h
    │       └── epoll_reactor.cc
    └── async_io/           # 异步IO模型
        ├── BUILD
        ├── async_io.h      # 异步IO基类
        ├── async_io.cc     # 异步IO实现
        └── io_uring/       # io_uring实现
            ├── BUILD
            ├── io_uring.h
            └── io_uring.cc
```

### 过滤器模块 (trpc/filter/)

```
trpc/filter/
├── BUILD                   # 过滤器构建文件
├── filter.h                # 过滤器基类（核心）
├── filter.cc               # 过滤器实现
├── filter_factory.h        # 过滤器工厂
├── filter_factory.cc       # 过滤器工厂实现
├── filter_manager.h        # 过滤器管理器
├── filter_manager.cc       # 过滤器管理器实现
├── filter_point.h          # 过滤器切点
├── filter_point.cc         # 过滤器切点实现
├── client_filter.h         # 客户端过滤器
├── client_filter.cc        # 客户端过滤器实现
├── server_filter.h         # 服务端过滤器
├── server_filter.cc        # 服务端过滤器实现
├── retry/                  # 重试过滤器
│   ├── BUILD
│   ├── retry_filter.h
│   └── retry_filter.cc
├── ratelimit/              # 限流过滤器
│   ├── BUILD
│   ├── ratelimit_filter.h
│   └── ratelimit_filter.cc
├── auth/                   # 认证过滤器
│   ├── BUILD
│   ├── auth_filter.h
│   └── auth_filter.cc
└── tracing/                # 追踪过滤器
    ├── BUILD
    ├── tracing_filter.h
    └── tracing_filter.cc
```

### 服务发现模块 (trpc/naming/)

```
trpc/naming/
├── BUILD                   # 服务发现构建文件
├── naming.h                # 服务发现基类
├── naming.cc               # 服务发现实现
├── naming_factory.h        # 服务发现工厂
├── naming_factory.cc       # 服务发现工厂实现
├── naming_manager.h        # 服务发现管理器
├── naming_manager.cc       # 服务发现管理器实现
├── registry.h              # 服务注册接口
├── registry.cc             # 服务注册实现
├── selector.h              # 服务选择器接口
├── selector.cc             # 服务选择器实现
├── load_balance.h          # 负载均衡接口
├── load_balance.cc         # 负载均衡实现
├── trpc_naming.h           # tRPC命名服务
├── trpc_naming.cc          # tRPC命名服务实现
├── polarismesh/            # 北极星服务治理
│   ├── BUILD
│   ├── polarismesh_naming.h
│   └── polarismesh_naming.cc
├── etcd/                   # etcd服务发现
│   ├── BUILD
│   ├── etcd_naming.h
│   └── etcd_naming.cc
└── consul/                 # Consul服务发现
    ├── BUILD
    ├── consul_naming.h
    └── consul_naming.cc
```

### 序列化模块 (trpc/serialization/)

```
trpc/serialization/
├── BUILD                   # 序列化构建文件
├── serialization.h         # 序列化基类
├── serialization.cc        # 序列化实现
├── serialization_factory.h # 序列化工厂
├── serialization_factory.cc # 序列化工厂实现
├── serialization_manager.h # 序列化管理器
├── serialization_manager.cc # 序列化管理器实现
├── serialization_type.h    # 序列化类型定义
├── protobuf/               # Protobuf序列化
│   ├── BUILD
│   ├── protobuf_serialization.h
│   └── protobuf_serialization.cc
├── json/                   # JSON序列化
│   ├── BUILD
│   ├── json_serialization.h
│   └── json_serialization.cc
├── flatbuffers/            # FlatBuffers序列化
│   ├── BUILD
│   ├── flatbuffers_serialization.h
│   └── flatbuffers_serialization.cc
├── noop/                   # 无操作序列化
│   ├── BUILD
│   ├── noop_serialization.h
│   └── noop_serialization.cc
└── thrift/                 # Thrift序列化
    ├── BUILD
    ├── thrift_serialization.h
    └── thrift_serialization.cc
```

### 压缩模块 (trpc/compressor/)

```
trpc/compressor/
├── BUILD                   # 压缩构建文件
├── compressor.h            # 压缩基类
├── compressor.cc           # 压缩实现
├── compressor_factory.h    # 压缩工厂
├── compressor_factory.cc   # 压缩工厂实现
├── compressor_manager.h    # 压缩管理器
├── compressor_manager.cc   # 压缩管理器实现
├── compressor_type.h       # 压缩类型定义
├── gzip/                   # gzip压缩
│   ├── BUILD
│   ├── gzip_compressor.h
│   └── gzip_compressor.cc
├── zlib/                   # zlib压缩
│   ├── BUILD
│   ├── zlib_compressor.h
│   └── zlib_compressor.cc
├── snappy/                 # snappy压缩
│   ├── BUILD
│   ├── snappy_compressor.h
│   └── snappy_compressor.cc
├── lz4/                    # lz4压缩
│   ├── BUILD
│   ├── lz4_compressor.h
│   └── lz4_compressor.cc
└── noop/                   # 无压缩
    ├── BUILD
    ├── noop_compressor.h
    └── noop_compressor.cc
```

### 配置管理模块 (trpc/config/)

```
trpc/config/
├── BUILD                   # 配置构建文件
├── config.h                # 配置基类
├── config.cc               # 配置实现
├── config_factory.h        # 配置工厂
├── config_factory.cc       # 配置工厂实现
├── config_manager.h        # 配置管理器
├── config_manager.cc       # 配置管理器实现
├── default_config.h        # 默认配置
├── default_config.cc       # 默认配置实现
├── yaml_config.h           # YAML配置
├── yaml_config.cc          # YAML配置实现
├── json_config.h           # JSON配置
├── json_config.cc          # JSON配置实现
├── etcd/                   # etcd配置中心
│   ├── BUILD
│   ├── etcd_config.h
│   └── etcd_config.cc
└── apollo/                 # Apollo配置中心
    ├── BUILD
    ├── apollo_config.h
    └── apollo_config.cc
```
